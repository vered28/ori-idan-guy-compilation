
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package IC.Parser;

import IC.*;
import IC.AST.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\060\002\000\002\005\011\000\002\006\004\000" +
    "\002\006\002\000\002\007\003\000\002\007\002\000\002" +
    "\010\003\000\002\010\004\000\002\011\004\000\002\011" +
    "\003\000\002\011\004\000\002\011\004\000\002\013\004" +
    "\000\002\014\004\000\002\015\003\000\002\015\004\000" +
    "\002\012\003\000\002\012\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\021\004\000\002\022\003\000\002\022\003" +
    "\000\002\016\003\000\002\016\003\000\002\020\004\000" +
    "\002\017\011\000\002\017\004\000\002\017\004\000\002" +
    "\025\003\000\002\025\002\000\002\025\004\000\002\025" +
    "\004\000\002\026\003\000\002\026\005\000\002\024\003" +
    "\000\002\027\003\000\002\027\002\000\002\030\003\000" +
    "\002\030\004\000\002\031\003\000\002\031\003\000\002" +
    "\061\002\000\002\040\005\000\002\062\002\000\002\040" +
    "\005\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\006\000\002\040\004\000\002\040\003\000" +
    "\002\040\004\000\002\037\003\000\002\063\002\000\002" +
    "\035\006\000\002\036\007\000\002\036\004\000\002\036" +
    "\004\000\002\032\003\000\002\032\003\000\002\033\007" +
    "\000\002\034\005\000\002\041\003\000\002\041\006\000" +
    "\002\041\007\000\002\041\005\000\002\041\003\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\003" +
    "\000\002\041\005\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\043\004\000\002\043\004" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\045\003\000\002" +
    "\045\005\000\002\045\006\000\002\046\003\000\002\046" +
    "\003\000\002\050\010\000\002\051\003\000\002\051\005" +
    "\000\002\047\006\000\002\052\003\000\002\052\002\000" +
    "\002\052\004\000\002\052\004\000\002\053\003\000\002" +
    "\053\005\000\002\054\005\000\002\055\003\000\002\055" +
    "\002\000\002\056\006\000\002\057\004\000\002\057\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\006\002\ufffe\004\010\001\002\000\004\002" +
    "\313\001\002\000\006\002\ufffd\004\ufffd\001\002\000\004" +
    "\002\001\001\002\000\006\002\uffff\004\010\001\002\000" +
    "\004\005\011\001\002\000\006\006\ufffb\025\ufffb\001\002" +
    "\000\006\006\ufff8\025\013\001\002\000\004\005\311\001" +
    "\002\000\004\006\015\001\002\000\022\003\032\005\035" +
    "\007\ufff6\010\025\011\036\012\017\013\026\014\027\001" +
    "\002\000\022\003\ufff2\005\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\001\002\000\006\017\uffe9\021" +
    "\uffe9\001\002\000\022\003\ufff5\005\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\001\002\000\004\015" +
    "\047\001\002\000\004\007\310\001\002\000\022\003\uffe0" +
    "\005\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\001\002\000\006\017\216\021\307\001\002\000\016" +
    "\003\304\005\035\011\036\012\017\013\026\014\027\001" +
    "\002\000\006\017\uffe8\021\uffe8\001\002\000\006\017\uffe7" +
    "\021\uffe7\001\002\000\022\003\uffe1\005\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\001\002\000\030" +
    "\003\uffe3\005\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\022\uffeb\023\276\001\002\000\024" +
    "\003\032\005\035\007\044\010\025\011\036\012\017\013" +
    "\026\014\027\022\043\001\002\000\024\003\uffe2\005\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\001\002\000\004\022\042\001\002\000\006\017\uffe6" +
    "\021\uffe6\001\002\000\004\021\041\001\002\000\022\003" +
    "\032\005\035\007\ufff7\010\025\011\036\012\017\013\026" +
    "\014\027\001\002\000\022\003\ufff4\005\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\001\002\000\024" +
    "\003\uffe4\005\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\001\002\000\022\003\ufff3\005\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\001" +
    "\002\000\022\003\ufff0\005\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\001\002\000\022\003\uffdd\005" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\001\002\000\022\003\ufff1\005\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\001\002\000\024\003\uffdc" +
    "\005\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\047\001\002\000\016\003\053\005\035\012\017" +
    "\013\026\014\027\016\uffda\001\002\000\006\016\uffd7\023" +
    "\uffd7\001\002\000\006\016\uffdb\023\274\001\002\000\006" +
    "\016\uffd5\023\uffd5\001\002\000\006\006\272\016\273\001" +
    "\002\000\004\016\055\001\002\000\004\006\056\001\002" +
    "\000\060\003\077\005\114\006\106\007\uffd3\012\017\013" +
    "\026\014\027\015\065\021\127\026\101\027\064\030\071" +
    "\031\076\032\113\033\070\052\104\053\066\055\063\056" +
    "\075\057\126\060\100\061\062\063\073\001\002\000\004" +
    "\007\271\001\002\000\050\016\uff95\017\uff95\020\uff95\022" +
    "\uff95\023\uff95\024\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050" +
    "\uff95\051\uff95\052\uff95\001\002\000\050\016\uffac\017\uffac" +
    "\020\uffac\022\uffac\023\uffac\024\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\001\002\000\050\016" +
    "\uff9f\017\uff9f\020\uff9f\022\uff9f\023\uff9f\024\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\001\002" +
    "\000\050\016\uffa0\017\uffa0\020\uffa0\022\uffa0\023\uffa0\024" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\001\002\000\004\022\uffcc\001\002\000\032\005\136" +
    "\015\065\021\127\030\071\031\076\052\104\053\066\055" +
    "\063\056\075\057\126\060\100\061\062\001\002\000\032" +
    "\005\136\015\065\021\127\030\071\031\076\052\104\053" +
    "\066\055\063\056\075\057\126\060\100\061\062\001\002" +
    "\000\062\003\uffca\005\uffca\006\uffca\007\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\021\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\052\uffca\053\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\063\uffca\001\002" +
    "\000\004\015\260\001\002\000\050\016\uffb9\017\uffb9\020" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\001\002\000\060\003\077" +
    "\005\114\006\106\007\uffd4\012\017\013\026\014\027\015" +
    "\065\021\127\026\101\027\064\030\071\031\076\032\113" +
    "\033\070\052\104\053\066\055\063\056\075\057\126\060" +
    "\100\061\062\063\073\001\002\000\034\005\136\015\065" +
    "\021\127\022\uff8a\030\071\031\076\052\104\053\066\055" +
    "\063\056\075\057\126\060\100\061\062\001\002\000\050" +
    "\016\uff98\017\uff98\020\uff98\022\uff98\023\uff98\024\uff98\036" +
    "\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98" +
    "\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\001" +
    "\002\000\050\016\uff9e\017\uff9e\020\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e" +
    "\052\uff9e\001\002\000\012\005\246\012\017\013\026\014" +
    "\027\001\002\000\062\003\077\005\114\006\106\012\017" +
    "\013\026\014\027\015\065\016\242\021\127\022\243\026" +
    "\101\027\064\030\071\031\076\032\113\033\070\052\104" +
    "\053\066\055\063\056\075\057\126\060\100\061\062\063" +
    "\073\001\002\000\050\016\uff9c\017\uff9c\020\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\001\002\000\004\022\uffce\001\002\000" +
    "\062\003\uffbc\005\uffbc\006\uffbc\007\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\021\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\052\uffbc\053\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\060\uffbc\061\uffbc\063\uffbc\001\002\000" +
    "\062\003\uffc5\005\uffc5\006\uffc5\007\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\021\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\052\uffc5\053\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\063\uffc5\001\002\000" +
    "\032\005\136\015\065\021\127\030\071\031\076\052\104" +
    "\053\066\055\063\056\075\057\126\060\100\061\062\001" +
    "\002\000\050\016\uff97\017\uff97\020\uff97\022\uff97\023\uff97" +
    "\024\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97" +
    "\052\uff97\001\002\000\060\003\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\021\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\052\uffc2\053" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\063\uffc2" +
    "\001\002\000\062\003\uffc3\005\uffc3\006\uffc3\007\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\021\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\052\uffc3\053" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\063\uffc3" +
    "\001\002\000\062\003\uffc8\005\uffc8\006\uffc8\007\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\021\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\052\uffc8\053" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\063\uffc8" +
    "\001\002\000\050\016\uffae\017\uffae\020\uffae\022\uffae\023" +
    "\uffae\024\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\001\002\000\062\003\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\021\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\052\uffd0\053\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\063\uffd0\001\002\000\004\015\230\001\002\000\010" +
    "\017\uffe6\021\uffe6\024\201\001\002\000\060\003\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\021\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\052\uffd2\053\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\061\uffd2\063\uffd2\001\002\000\040\017\153\024\142\036" +
    "\140\037\143\040\141\041\155\042\151\043\154\044\152" +
    "\045\150\046\147\047\146\050\145\051\156\052\144\001" +
    "\002\000\042\017\uffab\024\uffab\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\062\225\001\002\000\062" +
    "\003\uffcf\005\uffcf\006\uffcf\007\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\021\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\052\uffcf\053\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\060\uffcf\061\uffcf\063\uffcf\001\002\000\006" +
    "\017\216\021\217\001\002\000\062\003\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\021\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\063\uffc9\001\002\000\042\017\uffaa\022\215\024" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\001\002\000\050\016\uffb5\017\uffb5\020\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\001\002\000\062\003\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\021\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\213\052\uffbd\053\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\063\uffbd\001\002\000\050\016\uff9d\017\uff9d\020" +
    "\uff9d\022\uff9d\023\uff9d\024\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\001\002\000\054\015\130" +
    "\016\uff9b\017\uff9b\020\uff9b\022\uff9b\023\uff9b\024\uff9b\036" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\062" +
    "\uff9b\001\002\000\036\003\135\005\136\015\065\016\uff91" +
    "\021\127\030\071\031\076\052\104\053\066\055\063\056" +
    "\075\057\126\060\100\061\062\001\002\000\050\016\uffab" +
    "\017\uffab\020\uffab\022\uffab\023\uffab\024\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\001\002\000" +
    "\050\016\uffaa\017\uffaa\020\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\001\002\000\006\016\uff92\023\211\001\002\000\004\016" +
    "\210\001\002\000\006\016\207\023\206\001\002\000\004" +
    "\024\201\001\002\000\044\016\uff8e\017\153\023\uff8e\024" +
    "\142\036\140\037\143\040\141\041\155\042\151\043\154" +
    "\044\152\045\150\046\147\047\146\050\145\051\156\052" +
    "\144\001\002\000\032\005\136\015\065\021\127\030\071" +
    "\031\076\052\104\053\066\055\063\056\075\057\126\060" +
    "\100\061\062\001\002\000\032\005\136\015\065\021\127" +
    "\030\071\031\076\052\104\053\066\055\063\056\075\057" +
    "\126\060\100\061\062\001\002\000\006\021\175\035\174" +
    "\001\002\000\032\005\136\015\065\021\127\030\071\031" +
    "\076\052\104\053\066\055\063\056\075\057\126\060\100" +
    "\061\062\001\002\000\032\005\136\015\065\021\127\030" +
    "\071\031\076\052\104\053\066\055\063\056\075\057\126" +
    "\060\100\061\062\001\002\000\032\005\136\015\065\021" +
    "\127\030\071\031\076\052\104\053\066\055\063\056\075" +
    "\057\126\060\100\061\062\001\002\000\032\005\136\015" +
    "\065\021\127\030\071\031\076\052\104\053\066\055\063" +
    "\056\075\057\126\060\100\061\062\001\002\000\032\005" +
    "\136\015\065\021\127\030\071\031\076\052\104\053\066" +
    "\055\063\056\075\057\126\060\100\061\062\001\002\000" +
    "\032\005\136\015\065\021\127\030\071\031\076\052\104" +
    "\053\066\055\063\056\075\057\126\060\100\061\062\001" +
    "\002\000\032\005\136\015\065\021\127\030\071\031\076" +
    "\052\104\053\066\055\063\056\075\057\126\060\100\061" +
    "\062\001\002\000\032\005\136\015\065\021\127\030\071" +
    "\031\076\052\104\053\066\055\063\056\075\057\126\060" +
    "\100\061\062\001\002\000\032\005\136\015\065\021\127" +
    "\030\071\031\076\052\104\053\066\055\063\056\075\057" +
    "\126\060\100\061\062\001\002\000\032\005\136\015\065" +
    "\021\127\030\071\031\076\052\104\053\066\055\063\056" +
    "\075\057\126\060\100\061\062\001\002\000\032\005\136" +
    "\015\065\021\127\030\071\031\076\052\104\053\066\055" +
    "\063\056\075\057\126\060\100\061\062\001\002\000\032" +
    "\005\136\015\065\021\127\030\071\031\076\052\104\053" +
    "\066\055\063\056\075\057\126\060\100\061\062\001\002" +
    "\000\050\016\uffaf\017\153\020\uffaf\022\uffaf\023\uffaf\024" +
    "\142\036\140\037\143\040\141\041\155\042\uffaf\043\uffaf" +
    "\044\152\045\150\046\147\047\146\050\uffaf\051\uffaf\052" +
    "\144\001\002\000\050\016\uffa5\017\153\020\uffa5\022\uffa5" +
    "\023\uffa5\024\142\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\001\002\000\050\016\uffa3\017\153\020" +
    "\uffa3\022\uffa3\023\uffa3\024\142\036\140\037\143\040\141" +
    "\041\155\042\151\043\uffa3\044\152\045\150\046\147\047" +
    "\146\050\145\051\156\052\144\001\002\000\042\017\153" +
    "\020\163\024\142\036\140\037\143\040\141\041\155\042" +
    "\151\043\154\044\152\045\150\046\147\047\146\050\145" +
    "\051\156\052\144\001\002\000\052\016\uff99\017\uff99\020" +
    "\uff99\022\uff99\023\uff99\024\uff99\036\uff99\037\uff99\040\uff99" +
    "\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047" +
    "\uff99\050\uff99\051\uff99\052\uff99\062\uff99\001\002\000\050" +
    "\016\uffb4\017\153\020\uffb4\022\uffb4\023\uffb4\024\142\036" +
    "\140\037\143\040\141\041\155\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\144\001" +
    "\002\000\050\016\uffa4\017\153\020\uffa4\022\uffa4\023\uffa4" +
    "\024\142\036\140\037\143\040\141\041\155\042\uffa4\043" +
    "\uffa4\044\152\045\150\046\147\047\146\050\145\051\156" +
    "\052\144\001\002\000\050\016\uffb3\017\153\020\uffb3\022" +
    "\uffb3\023\uffb3\024\142\036\140\037\143\040\141\041\155" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\144\001\002\000\050\016\uffb2\017\153" +
    "\020\uffb2\022\uffb2\023\uffb2\024\142\036\140\037\143\040" +
    "\141\041\155\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\144\001\002\000\050\016" +
    "\uffb1\017\153\020\uffb1\022\uffb1\023\uffb1\024\142\036\140" +
    "\037\143\040\141\041\155\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\144\001\002" +
    "\000\050\016\uffb0\017\153\020\uffb0\022\uffb0\023\uffb0\024" +
    "\142\036\140\037\143\040\141\041\155\042\uffb0\043\uffb0" +
    "\044\152\045\150\046\147\047\146\050\uffb0\051\uffb0\052" +
    "\144\001\002\000\050\016\uffa8\017\153\020\uffa8\022\uffa8" +
    "\023\uffa8\024\142\036\uffa8\037\143\040\141\041\155\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\001\002\000\050\016\uffa7\017\153\020" +
    "\uffa7\022\uffa7\023\uffa7\024\142\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\050\uffa7\051\uffa7\052\uffa7\001\002\000\050\016\uffb6" +
    "\017\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\001\002\000" +
    "\054\015\130\016\uff9a\017\uff9a\020\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a" +
    "\052\uff9a\062\uff9a\001\002\000\050\016\uff94\017\uff94\020" +
    "\uff94\022\uff94\023\uff94\024\uff94\036\uff94\037\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047" +
    "\uff94\050\uff94\051\uff94\052\uff94\001\002\000\050\016\uffa6" +
    "\017\153\020\uffa6\022\uffa6\023\uffa6\024\142\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\001\002\000" +
    "\050\016\uffa9\017\153\020\uffa9\022\uffa9\023\uffa9\024\142" +
    "\036\uffa9\037\143\040\141\041\155\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\001\002\000\004\021\202\001\002\000\004\015\203\001" +
    "\002\000\036\003\135\005\136\015\065\016\uff91\021\127" +
    "\030\071\031\076\052\104\053\066\055\063\056\075\057" +
    "\126\060\100\061\062\001\002\000\004\016\205\001\002" +
    "\000\050\016\uff96\017\uff96\020\uff96\022\uff96\023\uff96\024" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96" +
    "\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052" +
    "\uff96\001\002\000\004\016\uff8f\001\002\000\004\016\uff90" +
    "\001\002\000\050\016\uff93\017\uff93\020\uff93\022\uff93\023" +
    "\uff93\024\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\001\002\000\032\005\136\015\065\021\127" +
    "\030\071\031\076\052\104\053\066\055\063\056\075\057" +
    "\126\060\100\061\062\001\002\000\044\016\uff8d\017\153" +
    "\023\uff8d\024\142\036\140\037\143\040\141\041\155\042" +
    "\151\043\154\044\152\045\150\046\147\047\146\050\145" +
    "\051\156\052\144\001\002\000\050\003\077\005\136\006" +
    "\106\015\065\021\127\026\101\027\064\030\071\031\076" +
    "\032\113\033\070\052\104\053\066\055\063\056\075\057" +
    "\126\060\100\061\062\063\073\001\002\000\062\003\uffba" +
    "\005\uffba\006\uffba\007\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\021\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\052\uffba\053\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\063\uffba\001\002\000\062\003\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\021\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\063\uffc6\001\002\000\004\020\224" +
    "\001\002\000\006\022\uff87\062\221\001\002\000\004\022" +
    "\223\001\002\000\032\005\136\015\065\021\127\030\071" +
    "\031\076\052\104\053\066\055\063\056\075\057\126\060" +
    "\100\061\062\001\002\000\042\017\153\022\uff88\024\142" +
    "\036\140\037\143\040\141\041\155\042\151\043\154\044" +
    "\152\045\150\046\147\047\146\050\145\051\156\052\144" +
    "\001\002\000\062\003\uff89\005\uff89\006\uff89\007\uff89\012" +
    "\uff89\013\uff89\014\uff89\015\uff89\021\uff89\026\uff89\027\uff89" +
    "\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\052\uff89\053" +
    "\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\063\uff89" +
    "\001\002\000\006\017\uffe5\021\uffe5\001\002\000\032\005" +
    "\136\015\065\021\127\030\071\031\076\052\104\053\066" +
    "\055\063\056\075\057\126\060\100\061\062\001\002\000" +
    "\042\017\153\022\227\024\142\036\140\037\143\040\141" +
    "\041\155\042\151\043\154\044\152\045\150\046\147\047" +
    "\146\050\145\051\156\052\144\001\002\000\062\003\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\021\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\052\uffc7\053\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\063\uffc7\001\002\000\032\005\136" +
    "\015\065\021\127\030\071\031\076\052\104\053\066\055" +
    "\063\056\075\057\126\060\100\061\062\001\002\000\042" +
    "\016\232\017\153\024\142\036\140\037\143\040\141\041" +
    "\155\042\151\043\154\044\152\045\150\046\147\047\146" +
    "\050\145\051\156\052\144\001\002\000\056\003\077\005" +
    "\114\006\106\012\017\013\026\014\027\015\065\021\127" +
    "\026\101\027\064\030\071\031\076\032\113\033\070\052" +
    "\104\053\066\055\063\056\075\057\126\060\100\061\062" +
    "\063\073\001\002\000\062\003\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\021\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\052" +
    "\uffc0\053\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\063\uffc0\001\002\000\060\003\077\005\114\006\106\007" +
    "\uffd3\012\017\013\026\014\027\015\065\021\127\026\101" +
    "\027\064\030\071\031\076\032\113\033\070\052\104\053" +
    "\066\055\063\056\075\057\126\060\100\061\062\063\073" +
    "\001\002\000\004\007\236\001\002\000\062\003\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\021\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\061\uffc1\063\uffc1\001\002\000\050\016\uffa2\017" +
    "\153\020\uffa2\022\uffa2\023\uffa2\024\142\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\001\002\000\004" +
    "\022\241\001\002\000\062\003\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\021\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\052" +
    "\uffcd\053\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\063\uffcd\001\002\000\062\003\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\021\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\052" +
    "\uffbf\053\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf" +
    "\063\uffbf\001\002\000\062\003\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\021\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\052" +
    "\uffc4\053\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\063\uffc4\001\002\000\062\003\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\021\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\052" +
    "\uffbe\053\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\063\uffbe\001\002\000\004\017\251\001\002\000\006\015" +
    "\247\017\uffe6\001\002\000\004\016\250\001\002\000\050" +
    "\016\uffb8\017\uffb8\020\uffb8\022\uffb8\023\uffb8\024\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\001" +
    "\002\000\034\005\136\015\065\020\224\021\127\030\071" +
    "\031\076\052\104\053\066\055\063\056\075\057\126\060" +
    "\100\061\062\001\002\000\042\017\153\020\253\024\142" +
    "\036\140\037\143\040\141\041\155\042\151\043\154\044" +
    "\152\045\150\046\147\047\146\050\145\051\156\052\144" +
    "\001\002\000\050\016\uffb7\017\uffb7\020\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\001\002\000\004\022\256\001\002\000\042" +
    "\017\153\022\uff8b\024\142\036\140\037\143\040\141\041" +
    "\155\042\151\043\154\044\152\045\150\046\147\047\146" +
    "\050\145\051\156\052\144\001\002\000\062\003\uff8c\005" +
    "\uff8c\006\uff8c\007\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c" +
    "\021\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\052\uff8c\053\uff8c\055\uff8c\056\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\063\uff8c\001\002\000\060\003\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\021\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\063\uffd1\001\002\000\032\005\136\015\065\021" +
    "\127\030\071\031\076\052\104\053\066\055\063\056\075" +
    "\057\126\060\100\061\062\001\002\000\042\016\262\017" +
    "\153\024\142\036\140\037\143\040\141\041\155\042\151" +
    "\043\154\044\152\045\150\046\147\047\146\050\145\051" +
    "\156\052\144\001\002\000\050\003\077\005\136\006\106" +
    "\015\065\021\127\026\101\027\064\030\071\031\076\032" +
    "\113\033\070\052\104\053\066\055\063\056\075\057\126" +
    "\060\100\061\062\063\073\001\002\000\062\003\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\021\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\052\uffbb\053\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\063\uffbb\001\002\000\050\016\uffa1\017" +
    "\153\020\uffa1\022\uffa1\023\uffa1\024\142\036\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\001\002\000\042" +
    "\016\266\017\153\024\142\036\140\037\143\040\141\041" +
    "\155\042\151\043\154\044\152\045\150\046\147\047\146" +
    "\050\145\051\156\052\144\001\002\000\050\016\uffad\017" +
    "\uffad\020\uffad\022\uffad\023\uffad\024\uffad\036\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\001\002\000\004" +
    "\022\270\001\002\000\062\003\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\021\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\052" +
    "\uffcb\053\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\063\uffcb\001\002\000\022\003\uffde\005\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\001\002\000\004" +
    "\016\uffd8\001\002\000\004\016\uffd9\001\002\000\012\005" +
    "\035\012\017\013\026\014\027\001\002\000\006\016\uffd6" +
    "\023\uffd6\001\002\000\004\021\302\001\002\000\004\022" +
    "\uffea\001\002\000\006\022\uffed\023\276\001\002\000\004" +
    "\022\uffec\001\002\000\006\022\uffee\023\uffee\001\002\000" +
    "\024\003\uffe3\005\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\001\002\000\016\005\035\007" +
    "\044\011\036\012\017\013\026\014\027\001\002\000\022" +
    "\003\uffdf\005\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\001\002\000\022\003\uffdc\005\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\001\002\000" +
    "\032\003\uffef\005\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\022\uffef\023\uffef\001" +
    "\002\000\006\002\ufffa\004\ufffa\001\002\000\004\006\ufff9" +
    "\001\002\000\006\002\ufffc\004\ufffc\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\012\002\003\003\005\004\006\005\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\311\001\001\000\002\001\001\000\004\060" +
    "\011\001\001\000\004\006\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\021\010\036\011\017\012" +
    "\033\013\030\016\015\017\022\020\027\021\032\022\020" +
    "\023\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\302\017\304\021" +
    "\032\022\020\023\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\277\015\276\001" +
    "\001\000\024\011\044\012\033\013\030\016\015\017\022" +
    "\020\027\021\032\022\045\023\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\011\037\012\033\013\030\016\015\017\022\020" +
    "\027\021\032\022\020\023\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\051\023\023\024\047\025\053\026\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\023" +
    "\120\027\056\030\071\031\114\032\107\033\124\034\101" +
    "\035\066\036\121\037\111\040\117\041\115\042\123\043" +
    "\110\044\060\045\116\046\122\047\057\050\073\051\104" +
    "\054\102\056\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\266\001\001\000\024\041\264\042\123\043" +
    "\110\044\060\045\130\046\131\047\057\050\073\051\104" +
    "\001\001\000\024\041\263\042\123\043\110\044\060\045" +
    "\130\046\131\047\057\050\073\051\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\023" +
    "\120\031\256\032\107\033\124\034\101\035\066\036\121" +
    "\037\111\040\117\041\115\042\123\043\110\044\060\045" +
    "\116\046\122\047\057\050\073\051\104\054\102\056\106" +
    "\001\001\000\026\041\254\042\123\043\110\044\060\045" +
    "\130\046\131\047\057\050\073\051\104\055\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\244\001" +
    "\001\000\052\023\120\031\243\032\107\033\124\034\101" +
    "\035\066\036\121\037\111\040\117\041\115\042\123\043" +
    "\110\044\060\045\116\046\122\047\057\050\073\051\104" +
    "\054\102\056\106\001\001\000\002\001\001\000\004\061" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\041\236\042\123\043\110\044\060\045\130\046\131\047" +
    "\057\050\073\051\104\001\001\000\002\001\001\000\004" +
    "\063\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\041\136\042\123" +
    "\043\110\044\060\045\130\046\131\047\057\050\073\051" +
    "\104\052\133\053\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\041\177" +
    "\042\123\043\110\044\060\045\130\046\131\047\057\050" +
    "\073\051\104\001\001\000\024\041\176\042\123\043\110" +
    "\044\060\045\130\046\131\047\057\050\073\051\104\001" +
    "\001\000\004\047\175\001\001\000\024\041\172\042\123" +
    "\043\110\044\060\045\130\046\131\047\057\050\073\051" +
    "\104\001\001\000\024\041\171\042\123\043\110\044\060" +
    "\045\130\046\131\047\057\050\073\051\104\001\001\000" +
    "\024\041\170\042\123\043\110\044\060\045\130\046\131" +
    "\047\057\050\073\051\104\001\001\000\024\041\167\042" +
    "\123\043\110\044\060\045\130\046\131\047\057\050\073" +
    "\051\104\001\001\000\024\041\166\042\123\043\110\044" +
    "\060\045\130\046\131\047\057\050\073\051\104\001\001" +
    "\000\024\041\165\042\123\043\110\044\060\045\130\046" +
    "\131\047\057\050\073\051\104\001\001\000\024\041\164" +
    "\042\123\043\110\044\060\045\130\046\131\047\057\050" +
    "\073\051\104\001\001\000\024\041\163\042\123\043\110" +
    "\044\060\045\130\046\131\047\057\050\073\051\104\001" +
    "\001\000\024\041\161\042\123\043\110\044\060\045\130" +
    "\046\131\047\057\050\073\051\104\001\001\000\024\041" +
    "\160\042\123\043\110\044\060\045\130\046\131\047\057" +
    "\050\073\051\104\001\001\000\024\041\157\042\123\043" +
    "\110\044\060\045\130\046\131\047\057\050\073\051\104" +
    "\001\001\000\024\041\156\042\123\043\110\044\060\045" +
    "\130\046\131\047\057\050\073\051\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\041\136\042\123\043\110\044\060\045\130\046" +
    "\131\047\057\050\073\051\104\052\203\053\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\041\211\042\123" +
    "\043\110\044\060\045\130\046\131\047\057\050\073\051" +
    "\104\001\001\000\002\001\001\000\042\032\107\033\124" +
    "\034\101\035\066\036\121\040\213\041\115\042\123\043" +
    "\110\044\060\045\116\046\122\047\057\050\073\051\104" +
    "\054\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\217\001\001\000\002\001\001" +
    "\000\024\041\221\042\123\043\110\044\060\045\130\046" +
    "\131\047\057\050\073\051\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\041\225\042" +
    "\123\043\110\044\060\045\130\046\131\047\057\050\073" +
    "\051\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\041\230\042\123\043\110\044\060\045\130\046\131" +
    "\047\057\050\073\051\104\001\001\000\002\001\001\000" +
    "\052\023\120\031\232\032\107\033\124\034\101\035\066" +
    "\036\121\037\111\040\117\041\115\042\123\043\110\044" +
    "\060\045\116\046\122\047\057\050\073\051\104\054\102" +
    "\056\106\001\001\000\002\001\001\000\056\023\120\027" +
    "\234\030\071\031\114\032\107\033\124\034\101\035\066" +
    "\036\121\037\111\040\117\041\115\042\123\043\110\044" +
    "\060\045\116\046\122\047\057\050\073\051\104\054\102" +
    "\056\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\041\251\042\123\043\110\044\060\045\130\046" +
    "\131\047\057\050\073\051\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\041\260\042\123" +
    "\043\110\044\060\045\130\046\131\047\057\050\073\051" +
    "\104\001\001\000\002\001\001\000\042\032\107\033\124" +
    "\034\101\035\066\036\121\040\262\041\115\042\123\043" +
    "\110\044\060\045\116\046\122\047\057\050\073\051\104" +
    "\054\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\051\023\023\024\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\277\015\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\302\021\032\022\305\023" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	private Lexer lexer;
	
	private List<SyntaxError> errors = null;
	private Stack<Integer> scopeBeginnings;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
		scopeBeginnings = new Stack<Integer>(); 
		errors = new LinkedList<SyntaxError>();
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}	

	public int getColumn() {
		return lexer.getColumnNumber();
	}	

	//cancel CUP's expected tokens message (only print ours):
	protected void report_expected_token_ids() { }

	public void report_fatal_error(String message, Object info) throws Exception {
		if (errors.size() == 0)
			super.report_fatal_error(message, info);
	}

	public void report_error(String message, Object info) {
		if (info instanceof Token && !stack.isEmpty()) {

			String msg = "expected ";
			boolean first = true;

			/* expected_token_ids() is unpredictable. Attempt calling it
			 * no more than 11 times (10 here, one afterwards) in order
			 * to get some idea as to what was expected. */
			 int count = 0;
			 while (expected_token_ids().size() == 0 && count++ < 10);

			/* always maintain another call to expected_token_ids() after
			 * its' size returned greater than zero, since it is
			 * unpredictable and sometimes returns partial data the
			 * first time around... */
			
			if (expected_token_ids().size() == 0) {
				msg = "unexpected token '" + ((Token)info).getValue() + "'";
			} else {

				for (int symID : expected_token_ids()) {
					String symb = sym.terminalNames[symID];
					if (symb.equals("CLASS_ID"))
						symb = "class identifier";
					else if (symb.equals("STR"))
						symb = "string instance";
					else if (symb.equals("INTEGER"))
						symb = "integer literal";
					else if (symb.equals("LPAREN"))
						symb = "(";
					else if (symb.equals("RPAREN"))
						symb = ")";
					else if (symb.equals("LBRACE"))
						symb = "{";
					else if (symb.equals("RBRACE"))
						symb = "}";
					else if (symb.equals("LBRACK"))
						symb = "[";
					else if (symb.equals("RBRACK"))
						symb = "]";
					else if (symb.equals("COMMA"))
						symb = ",";
					else if (symb.equals("SEMICOLON"))
						symb = ";";
					else if (symb.equals("OP_DOT"))
						symb = ".";
					else if (symb.equals("OP_ADD"))
						symb = "+";
					else if (symb.equals("OP_MINUS"))
						symb = "-";
					else if (symb.equals("OP_MULT"))
						symb = "*";
					else if (symb.equals("OP_DIV"))
						symb = "/";
					else if (symb.equals("OP_MOD"))
						symb = "%";
					else if (symb.equals("OP_NOT"))
						symb = "!";
					else if (symb.equals("OP_AND"))
						symb = "&&";
					else if (symb.equals("OP_OR"))
						symb = "||";
					else if (symb.equals("OP_LT"))
						symb = "<";
					else if (symb.equals("OP_LEQ"))
						symb = "<=";
					else if (symb.equals("OP_GT"))
						symb = ">";
					else if (symb.equals("OP_GEQ"))
						symb = ">=";
					else if (symb.equals("OP_EQ"))
						symb = "==";
					else if (symb.equals("OP_NEQ"))
						symb = "!=";
					else if (symb.equals("OP_ASSIGNMENT"))
						symb = "=";
					else if (symb.equals("error"))
						continue;
					else symb = symb.toLowerCase();
					if (!first)
						msg += " or ";
					first = false;
					msg += "'" + symb + "'";
				}

				msg += ", but found '" + ((Token)info).getValue() + "'";
			}

			errors.add(new SyntaxError(msg, "syntax error", getLine(), getColumn()));
		}
	}

	public List<SyntaxError> getSyntaxErrors() {
		return errors;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ClassDeclList 
            {
              Program RESULT =null;
		int clsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ICClass> cls = (List<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(cls); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ClassDeclList ::= ClassDecl 
            {
              List<ICClass> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ICClass> cl = (List<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclList ::= 
            {
              List<ICClass> RESULT =null;
		 RESULT = new LinkedList<ICClass>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDecl ::= ICClass 
            {
              List<ICClass> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ICClass>(); RESULT.add(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDecl ::= ClassDecl ICClass 
            {
              List<ICClass> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ICClass> cl = (List<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 cl.add(c); RESULT = cl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              ICClass RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 scopeBeginnings.push(getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ICClass ::= CLASS CLASS_ID NT$0 Inheritance LBRACE ClassComponentsList RBRACE 
            {
              ICClass RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ICClass) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ext = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int compsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int compsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> comps = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			
				List<Field> fields = new LinkedList<Field>();
				List<Method> methods = new LinkedList<Method>();
				
				for (ASTNode node : comps) {
					if (node instanceof Field) {
						fields.add((Field)node);
					} else {
						methods.add((Method)node);
					}
				}
				
				if (ext == null)
					RESULT = new ICClass(scopeBeginnings.pop(), cid, fields, methods);
				else
					RESULT = new ICClass(scopeBeginnings.pop(), cid, ext, fields, methods);
				
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ICClass",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Inheritance ::= EXTENDS CLASS_ID 
            {
              String RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cid; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inheritance",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inheritance ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inheritance",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ClassComponentsList ::= ClassComponents 
            {
              List<ASTNode> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ASTNode> lst = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassComponentsList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ClassComponentsList ::= 
            {
              List<ASTNode> RESULT =null;
		 RESULT = new LinkedList<ASTNode>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassComponentsList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ClassComponents ::= ClassComponent 
            {
              List<ASTNode> RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ASTNode> cc = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										RESULT = new LinkedList<ASTNode>();
										if (cc != null)
											RESULT.addAll(cc);
									  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassComponents",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ClassComponents ::= ClassComponents ClassComponent 
            {
              List<ASTNode> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> lst = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ASTNode> cc = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
															if (cc != null)
																lst.addAll(cc);
															RESULT = lst;
												   		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassComponents",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ClassComponent ::= FieldsList SEMICOLON 
            {
              List<ASTNode> RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> fl = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassComponent",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ClassComponent ::= Method 
            {
              List<ASTNode> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ASTNode>(); RESULT.add(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassComponent",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ClassComponent ::= error ClassComponent 
            {
              List<ASTNode> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassComponent",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ClassComponent ::= error SEMICOLON 
            {
              List<ASTNode> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassComponent",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FullField ::= Type IDENTIFIER 
            {
              Field RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Field(t, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FullField",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ExtraField ::= COMMA IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExtraField",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ExtraFields ::= ExtraField 
            {
              List<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<String>(); RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExtraFields",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ExtraFields ::= ExtraField ExtraFields 
            {
              List<String> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> fl = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 fl.add(f); RESULT = fl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExtraFields",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FieldsList ::= FullField 
            {
              List<ASTNode> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ASTNode>(); RESULT.add(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldsList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldsList ::= FullField ExtraFields 
            {
              List<ASTNode> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int extraleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int extraright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> extra = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			   									RESULT = new LinkedList<ASTNode>();
			   									RESULT.add(f);
			   									for(String s : extra) {
			   										RESULT.add(new Field(f.getType(), s));
			   									}
			   								 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldsList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType(getLine(), DataTypes.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType(getLine(), DataTypes.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType(getLine(), DataTypes.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Type ::= CLASS_ID 
            {
              Type RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UserType(getLine(), cid); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= Type LBRACK RBRACK 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 t.incrementDimension(); RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VoidType ::= VOID IDENTIFIER 
            {
              Field RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Field(new PrimitiveType(getLine(), DataTypes.VOID), id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VoidType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ReturnType ::= FullField 
            {
              Field RESULT =null;
		int fullleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fullright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Field full = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = full; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnType",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ReturnType ::= VoidType 
            {
              Field RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Field v = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnType",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Method ::= StaticMethod 
            {
              Method RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method sm = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Method ::= VirtualMethod 
            {
              Method RESULT =null;
		int vmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method vm = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Method",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // StaticMethod ::= STATIC VirtualMethod 
            {
              Method RESULT =null;
		int vmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Method vm = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StaticMethod(vm.getType(), vm.getName(), vm.getFormals(), vm.getStatements()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticMethod",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VirtualMethod ::= ReturnType LPAREN FormalsList RPAREN LBRACE StatementsList RBRACE 
            {
              Method RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Field type = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualMethod(type.getType(), type.getName(), fl, sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualMethod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VirtualMethod ::= error RBRACE 
            {
              Method RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualMethod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VirtualMethod ::= error ReturnType 
            {
              Method RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualMethod",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FormalsList ::= Formals 
            {
              List<Formal> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Formal> fs = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalsList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FormalsList ::= 
            {
              List<Formal> RESULT =null;
		 RESULT = new LinkedList<Formal>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalsList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FormalsList ::= error RPAREN 
            {
              List<Formal> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalsList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FormalsList ::= error LBRACE 
            {
              List<Formal> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalsList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Formals ::= Formal 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Formal>(); RESULT.add(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Formals ::= Formals COMMA Formal 
            {
              List<Formal> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Formal> fs = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 fs.add(f); RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formals",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Formal ::= FullField 
            {
              Formal RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Field field = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Formal(field.getType(), field.getName()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Formal",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StatementsList ::= Statements 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementsList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StatementsList ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new LinkedList<Statement>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementsList",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statements ::= Statement 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								RESULT = new LinkedList<Statement>();
								if (s != null)
									RESULT.add(s);
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statements ::= Statements Statement 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			   								if (s != null)
			   									sl.add(s);
			   								RESULT = sl;
			   							 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= VariableDeclarationStatement 
            {
              Statement RESULT =null;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement vds = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= NotVariableDeclarationStatement 
            {
              Statement RESULT =null;
		int nvdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nvdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement nvds = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nvds; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$1 ::= 
            {
              Statement RESULT =null;
 RESULT = new Break(getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NotVariableDeclarationStatement ::= BREAK NT$1 SEMICOLON 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NotVariableDeclarationStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$2 ::= 
            {
              Statement RESULT =null;
 RESULT = new Continue(getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NotVariableDeclarationStatement ::= CONTINUE NT$2 SEMICOLON 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NotVariableDeclarationStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NotVariableDeclarationStatement ::= StatementsScope 
            {
              Statement RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement ss = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NotVariableDeclarationStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NotVariableDeclarationStatement ::= WhileStatement 
            {
              Statement RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement ws = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NotVariableDeclarationStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NotVariableDeclarationStatement ::= ConditionalStatement 
            {
              Statement RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement cs = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NotVariableDeclarationStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NotVariableDeclarationStatement ::= Location OP_ASSIGNMENT Expression SEMICOLON 
            {
              Statement RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assignment(loc, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NotVariableDeclarationStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NotVariableDeclarationStatement ::= Call SEMICOLON 
            {
              Statement RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call call = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallStatement(call); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NotVariableDeclarationStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NotVariableDeclarationStatement ::= ReturnStatement 
            {
              Statement RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement ret = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ret; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NotVariableDeclarationStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NotVariableDeclarationStatement ::= error SEMICOLON 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NotVariableDeclarationStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VariableDeclarationStatement ::= VariableDeclaration 
            {
              Statement RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement vd = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarationStatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$3 ::= 
            {
              Statement RESULT =null;
 scopeBeginnings.push(getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StatementsScope ::= LBRACE NT$3 StatementsList RBRACE 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (scopeBeginnings.isEmpty()) 
			  				//should not happen, but might (cause programmers write with bugs):
			  				throw new SyntaxError("Parser error at end of scope.", "syntax error", getLine(), getColumn());
			  		   RESULT = new StatementsBlock(scopeBeginnings.pop(), sl);
			  		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementsScope",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WhileStatement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WhileStatement ::= error RPAREN 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // WhileStatement ::= error Statement 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ConditionalStatement ::= IfStatement 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		If is = (If)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ConditionalStatement ::= IfElseStatement 
            {
              Statement RESULT =null;
		int iesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement ies = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ies; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IfStatement ::= IF LPAREN Expression RPAREN NotVariableDeclarationStatement 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IfElseStatement ::= IfStatement ELSE NotVariableDeclarationStatement 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		If is = (If)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(is.getCondition(), is.getOperation(), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfElseStatement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expression ::= THIS 
            {
              Expression RESULT =null;
		 RESULT = new This(getLine()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expression ::= NEW CLASS_ID LPAREN RPAREN 
            {
              Expression RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NewClass(getLine(), cid); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expression ::= NEW Type LBRACK Expression RBRACK 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewArray(t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expression ::= Expression OP_DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Length(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expression ::= Binop 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BinaryOp op = (BinaryOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expression ::= Expression OP_LT Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.LT, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expression ::= Expression OP_LEQ Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.LTE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expression ::= Expression OP_GT Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.GT, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expression ::= Expression OP_GEQ Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.GTE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expression ::= Expression OP_EQ Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.EQUAL, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expression ::= Expression OP_NEQ Expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.NEQUAL, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expression ::= Unop 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		UnaryOp op = (UnaryOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expression ::= LPAREN Expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expression ::= Literal 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expression ::= Location 
            {
              Expression RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = loc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expression ::= Call 
            {
              Expression RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call call = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = call; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Binop ::= Expression OP_ADD Expression 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.PLUS, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Binop ::= Expression OP_MINUS Expression 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.MINUS, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Binop ::= Expression OP_MULT Expression 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.MULTIPLY, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Binop ::= Expression OP_DIV Expression 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.DIVIDE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Binop ::= Expression OP_MOD Expression 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.MOD, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Binop ::= Expression OP_AND Expression 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.LAND, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Binop ::= Expression OP_OR Expression 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.LOR, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Binop",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Unop ::= OP_MINUS Expression 
            {
              UnaryOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MathUnaryOp(UnaryOps.UMINUS, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Unop",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Unop ::= OP_NOT Expression 
            {
              UnaryOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalUnaryOp(UnaryOps.LNEG, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Unop",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Literal ::= INTEGER 
            {
              Literal RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Literal(getLine(), LiteralTypes.INTEGER, val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Literal ::= STR 
            {
              Literal RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		    			//store string as a stream of character (remove the enclosing quotes from the token!):
		    			RESULT = new Literal(getLine(), LiteralTypes.STRING, val.substring(1, val.length() - 1));
		    		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Literal ::= TRUE 
            {
              Literal RESULT =null;
		 RESULT = new Literal(getLine(), LiteralTypes.TRUE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Literal ::= FALSE 
            {
              Literal RESULT =null;
		 RESULT = new Literal(getLine(), LiteralTypes.FALSE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Literal ::= NULL 
            {
              Literal RESULT =null;
		 RESULT = new Literal(getLine(), LiteralTypes.NULL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Location ::= IDENTIFIER 
            {
              Location RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableLocation(getLine(), id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Location ::= Expression OP_DOT IDENTIFIER 
            {
              Location RESULT =null;
		int extleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression ext = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableLocation(getLine(), ext, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Location ::= Expression LBRACK Expression RBRACK 
            {
              Location RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLocation(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Call ::= StaticCall 
            {
              Call RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call sc = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Call ::= VirtualCall 
            {
              Call RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call vc = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Call",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // StaticCall ::= CLASS_ID OP_DOT IDENTIFIER LPAREN ExpressionsList RPAREN 
            {
              Call RESULT =null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> exprs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StaticCall(getLine(), cid, id, exprs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticCall",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VirtualCall ::= CommonCall 
            {
              Call RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call cc = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualCall",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VirtualCall ::= Expression OP_DOT CommonCall 
            {
              Call RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression loc = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Call cc = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VirtualCall(cc.getLine(), loc, cc.getName(), cc.getArguments()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualCall",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CommonCall ::= IDENTIFIER LPAREN ExpressionsList RPAREN 
            {
              Call RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> exprs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualCall(getLine(), id, exprs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CommonCall",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ExpressionsList ::= Expressions 
            {
              List<Expression> RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expression> exprs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exprs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExpressionsList ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new LinkedList<Expression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExpressionsList ::= error RPAREN 
            {
              List<Expression> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ExpressionsList ::= error COMMA 
            {
              List<Expression> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionsList",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expressions ::= Expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Expression>(); RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expressions ::= Expressions COMMA Expression 
            {
              List<Expression> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(e); RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ReturnStatement ::= RETURN ReturnBody SEMICOLON 
            {
              Statement RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (val == null)
						RESULT = new Return(getLine());
					   else
					   	RESULT = new Return(getLine(), val);
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ReturnBody ::= Expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnBody",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ReturnBody ::= 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnBody",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VariableDeclaration ::= Type IDENTIFIER ExpressionAssignment SEMICOLON 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (e == null)
							RESULT = new LocalVariable(t, id);
						   else
						   	RESULT = new LocalVariable(t, id, e);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ExpressionAssignment ::= OP_ASSIGNMENT Expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionAssignment",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExpressionAssignment ::= 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionAssignment",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
