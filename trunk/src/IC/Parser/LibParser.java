
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package IC.Parser;

import IC.*;
import IC.AST.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LibParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public LibParser() {super();}

  /** Constructor which sets the default scanner. */
  public LibParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LibParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\013\002\000\002\002\010\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\003\003" +
    "\000\002\003\004\000\002\005\011\000\002\006\003\000" +
    "\002\006\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\005\000\002\011" +
    "\003\000\002\011\002\000\002\012\003\000\002\012\005" +
    "\000\002\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\004\004\005\001\002\000\004\002\043\001" +
    "\002\000\004\005\006\001\002\000\004\006\001\001\002" +
    "\000\004\006\010\001\002\000\006\007\ufffd\010\012\001" +
    "\002\000\006\007\ufffe\010\012\001\002\000\014\005\021" +
    "\011\023\012\024\013\022\014\016\001\002\000\004\007" +
    "\015\001\002\000\006\007\ufffc\010\ufffc\001\002\000\004" +
    "\002\000\001\002\000\006\017\ufff5\021\ufff5\001\002\000" +
    "\006\017\036\021\ufff9\001\002\000\004\021\025\001\002" +
    "\000\006\017\ufff4\021\ufff4\001\002\000\006\017\ufff6\021" +
    "\ufff6\001\002\000\004\021\ufff8\001\002\000\006\017\ufff7" +
    "\021\ufff7\001\002\000\004\015\026\001\002\000\014\005" +
    "\021\012\024\013\022\014\016\016\ufff1\001\002\000\004" +
    "\016\040\001\002\000\006\017\036\021\035\001\002\000" +
    "\006\016\ufff0\023\ufff0\001\002\000\006\016\ufff2\023\033" +
    "\001\002\000\012\005\021\012\024\013\022\014\016\001" +
    "\002\000\006\016\uffef\023\uffef\001\002\000\006\016\uffee" +
    "\023\uffee\001\002\000\004\020\037\001\002\000\006\017" +
    "\ufff3\021\ufff3\001\002\000\004\022\041\001\002\000\006" +
    "\007\ufffa\010\ufffa\001\002\000\006\007\ufffb\010\ufffb\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\006\001\001\000\002\001\001" +
    "\000\010\003\010\004\012\005\013\001\001\000\004\005" +
    "\041\001\001\000\006\006\017\007\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\027\010\030\011\026\012\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\027\010\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LibParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LibParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LibParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	private Lexer lexer;
	private SyntaxError error = null;

	private int classDeclLine = 0;

	public LibParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}	

	public int getColumn() {
		return lexer.getColumnNumber();
	}	

	//cancel CUP's expected tokens message (only print ours):
	protected void report_expected_token_ids() { }

	public void report_fatal_error(String message, Object info) throws Exception {
		if (error == null)
			super.report_fatal_error(message, info);
	}

	public void report_error(String message, Object info) {
		if (info instanceof Token && !stack.isEmpty()) {

			String msg = "expected ";
			boolean first = true;

			/* expected_token_ids() is unpredictable. Attempt calling it
			 * no more than 11 times (10 here, one afterwards) in order
			 * to get some idea as to what was expected. */
			 int count = 0;
			 while (expected_token_ids().size() == 0 && count++ < 10);

			/* always maintain another call to expected_token_ids() after
			 * its' size returned greater than zero, since it is
			 * unpredictable and sometimes returns partial data the
			 * first time around... */

			if (expected_token_ids().size() == 0) {
				msg = "unexpected token '" + ((Token)info).getValue() + "'";
			} else {

				for (int symID : expected_token_ids()) {
					String symb = sym.terminalNames[symID];
					if (symb.equals("CLASS_ID"))
						symb = "class identifier";
					else if (symb.equals("LPAREN"))
						symb = "(";
					else if (symb.equals("RPAREN"))
						symb = ")";
					else if (symb.equals("LBRACE"))
						symb = "{";
					else if (symb.equals("RBRACE"))
						symb = "}";
					else if (symb.equals("LBRACK"))
						symb = "[";
					else if (symb.equals("RBRACK"))
						symb = "]";
					else if (symb.equals("COMMA"))
						symb = ",";
					else if (symb.equals("SEMICOLON"))
						symb = ";";
					else symb = symb.toLowerCase();
					if (!first)
						msg += " or ";
					first = false;
					msg += "'" + symb + "'";
				}

				msg += ", but found '" + ((Token)info).getValue() + "'";
			}

			error = new SyntaxError(msg, "syntax error", getLine(), getColumn());
		}
	}

	public SyntaxError getSyntaxError() {
		return error;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LibParser$actions {
  private final LibParser parser;

  /** Constructor */
  CUP$LibParser$actions(LibParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LibParser$do_action_part00000000(
    int                        CUP$LibParser$act_num,
    java_cup.runtime.lr_parser CUP$LibParser$parser,
    java.util.Stack            CUP$LibParser$stack,
    int                        CUP$LibParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LibParser$result;

      /* select the action based on the action number */
      switch (CUP$LibParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Program RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
 classDeclLine = getLine(); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= CLASS CLASS_ID NT$0 LBRACE MethodsList RBRACE 
            {
              Program RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Program) ((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		List<Method> ml = (List<Method>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		
	       if(id.equals("Library")) {
			List<ICClass> classes = new LinkedList<ICClass>();
			classes.add(new ICClass(classDeclLine, id, new LinkedList<Field>(), ml)); 
			RESULT = new Program(classes);
			}
	       else
			throw new SyntaxError("Class name must be Library.", "syntax error", getLine(), getColumn()); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-5)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		RESULT = start_val;
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LibParser$parser.done_parsing();
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MethodsList ::= Methods 
            {
              List<Method> RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		List<Method> ms = (List<Method>)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = ms; 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("MethodsList",2, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MethodsList ::= 
            {
              List<Method> RESULT =null;
		 RESULT = new LinkedList<Method>(); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("MethodsList",2, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Methods ::= Method 
            {
              List<Method> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new LinkedList<Method>(); RESULT.add(m); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Methods",1, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Methods ::= Methods Method 
            {
              List<Method> RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		List<Method> ms = (List<Method>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 ms.add(m); RESULT = ms; 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Methods",1, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Method ::= STATIC T IDENTIFIER LPAREN FormalsList RPAREN SEMICOLON 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-4)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).right;
		List<Formal> fl = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).value;
		 RESULT = new LibraryMethod(t, id, fl); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Method",3, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-6)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // T ::= Type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = t; 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // T ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType(getLine(), DataTypes.VOID); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("T",4, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType(getLine(), DataTypes.INT); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType(getLine(), DataTypes.BOOLEAN); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new PrimitiveType(getLine(), DataTypes.STRING); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= CLASS_ID 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new UserType(getLine(), id); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= Type LBRACK RBRACK 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).value;
		 t.incrementDimension(); RESULT = t; 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FormalsList ::= Formals 
            {
              List<Formal> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		List<Formal> fs = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = fs; 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("FormalsList",7, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FormalsList ::= 
            {
              List<Formal> RESULT =null;
		 RESULT = new LinkedList<Formal>(); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("FormalsList",7, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Formals ::= Formal 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new LinkedList<Formal>(); RESULT.add(f); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Formals ::= Formals COMMA Formal 
            {
              List<Formal> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).right;
		List<Formal> fs = (List<Formal>)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 fs.add(f); RESULT = fs; 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Formals",8, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-2)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Formal ::= Type IDENTIFIER 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LibParser$stack.peek()).value;
		 RESULT = new Formal(t, id); 
              CUP$LibParser$result = parser.getSymbolFactory().newSymbol("Formal",6, ((java_cup.runtime.Symbol)CUP$LibParser$stack.elementAt(CUP$LibParser$top-1)), ((java_cup.runtime.Symbol)CUP$LibParser$stack.peek()), RESULT);
            }
          return CUP$LibParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LibParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LibParser$do_action(
    int                        CUP$LibParser$act_num,
    java_cup.runtime.lr_parser CUP$LibParser$parser,
    java.util.Stack            CUP$LibParser$stack,
    int                        CUP$LibParser$top)
    throws java.lang.Exception
    {
              return CUP$LibParser$do_action_part00000000(
                               CUP$LibParser$act_num,
                               CUP$LibParser$parser,
                               CUP$LibParser$stack,
                               CUP$LibParser$top);
    }
}

}
